<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <link rel="stylesheet" type="text/css" media="screen" href="css/graph.css" />
        <script src="js/d3.min.js" charset="utf-8"></script>
        <script src="js/papaparse.min.js"></script>
    </head>
    <body>
        <script>
            // Will parse a given CSV file
            function loadCSV(file, fileType) {
                var request;
                if (window.XMLHttpRequest) {
                    // IE7+, Firefox, Chrome, Opera, Safari
                    request = new XMLHttpRequest();
                    } else {
                    // code for IE6, IE5
                    request = new ActiveXObject('Microsoft.XMLHTTP');
                }
                request.open('GET', file, false);
                request.send();
                // Parse either nodes or edges csv file
                if (fileType == "nodes") {
                    return parseNodesCSV(request.responseText);
                } else if (fileType == "edges") {
                    return parseEdgesCSV(request.responseText);
                } else {
                    console.log("Unknown csv file sent to loadCSV");
                }

            }

            // Returns a list of links between two nodes
            function parseEdgesCSV (data) {
                var parsedData = Papa.parse(data, {});
                var links = [];
                for (var i = 0; i < parsedData.data.length; i++) {
                    var node = parsedData.data[i];
                    links.push({
                        source: node[0],
                        target: node[1]
                    });
                }
                return links;
            }

            // A mapping from node positions in the array to their IDs
            var positionsToIDs = {}

            // Returns a list of nodes and populates positionsToIDs map
            function parseNodesCSV(data){
                var parsedData = Papa.parse(data, {});
                var nodes = [];
                for (var i = 0; i < parsedData.data.length; i++) {
                    var node = parsedData.data[i];
                    nodes.push({
                        fbid: node[0],
                        name: node[1],
                        gender: node[2]
                    });
                    positionsToIDs[i] = node[0];
                }
                return nodes;
            }

            var nodes_json =  loadCSV("data/nodes.csv", "nodes");
            var links_json = loadCSV("data/edges.csv", "edges");

            // Replacing node fbids in the links array with their positions
            for (var i = 0; i < nodes_json.length; i++) {
                for (var j = 0; j < links_json.length; j++) {
                    var link = links_json[j];
                    var fbidForPosition = positionsToIDs[i];
                    if (link.source == fbidForPosition) {
                        link.source = i;
                    }
                    if (link.target == fbidForPosition) {
                        link.target = i;
                    }
                }
            }

            // Used to pass nodes and links to d3
            var result_json = {nodes: nodes_json, links : links_json};

            var height = 2750;
            var width = 2750;

            var svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

            // Setting d3 layout force
            var force = d3.layout.force()
            .gravity(1)
            .linkDistance(30)
            .charge(-2000)
            .size([width, height]);

            force
            .nodes(result_json.nodes)
            .links(result_json.links)
            .start();

            var link = svg.selectAll(".link")
            .data(result_json.links)
            .enter().append("line")
            .attr("class", "link");

            var node = svg.selectAll(".node")
            .data(result_json.nodes)
            .enter().append("g")
            .attr("class", "node")
            .call(force.drag);

            // Node represented as a circle
            node.append("circle")
            .attr("r", 6);

            // Node text uses the name of the node (Facebook name)
            node.append("text")
            .attr("dx", 12)
            .attr("dy", ".35em")
            .text(function(d) {
                return d.name;
            });

            // Updating the position of the graph
            force.on("tick", function() {
                link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

                node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
            });
        </script>
    </body>
</html>
